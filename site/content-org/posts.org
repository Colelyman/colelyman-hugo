#+TITLE: posts
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: post
#+SEQ_TODO: TODO DRAFT DONE
#+PROPERTY: header-args :eval never-export

#+OPTIONS: creator:t toc:nil

* Blog Ideas
** DONE Colored de Bruijn Graphs :BIOINFORMATICS:
CLOSED: [2018-07-11 Wed 13:47]
:PROPERTIES:
  :EXPORT_FILE_NAME: colored-de-bruijn-graphs
:END:
I have really wanted to write this post for a long time, but seem to only now
get around to it. For more than a year now my research in the
[[http://bioresearch.byu.edu/][Computational Sciences Lab (CSL)]] at [[https://byu.edu][Brigham Young University (BYU)]] we have been
researching various applications of the Colored de Bruijn Graph (CdBG). It all
started when we explored some novel phylogenetic reconstruction methods in the
CS 601R class during Winter semester 2017. We (or at least, I) kept being drawn
back to CdBG's and their potential for phylogeny reconstruction. Here are some
of the things that I have learned along the way!
*** Related Work
As with most scientific endeavors, this project certainly stands on the
shoulders of giants. Some of these giants include the following papers and their
respective authors. I think that they have done amazing work and I admire their
methods.
  - [[http://dx.doi.org/10.1038/ng.1028][De novo assembly and genotyping of variants using colored de Bruijn graphs]]
    :: Zamin Iqbal et al.'s original paper introducing the CdBG's application to
    Bioinformatics. Even though their implementation isn't very efficient, it
    established the usefulness of the data structure in the Bioinformatic
    community.
  - [[http://dx.doi.org/10.1093/bioinformatics/btw609][TwoPaCo: an efficient algorithm to build the compacted de Bruijn graph from
    many complete genomes]] :: Ilia Minkin et al.'s work on discovering bubbles
    within the CdBG structure, which influenced our thinking and guided our
    work.
  - [[http://dx.doi.org/10.1186/s12864-015-1647-5][An assembly and alignment-free method of phylogeny reconstruction from
    next-generation sequencing data]] :: Huan Fan et al.'s application of a
    fantastic distance based phylogenetic tree reconstruction algorithm that I
    have found to be very accurate (and talk about fast). I love the simplicity
    of their model of evolution (based on the [[https://en.wikipedia.org/wiki/Jaccard_index][Jaccard Index]]), I find that it is
    very elegant.
*** Motivation
We want to use the CdBG to reconstruct phylogenetic trees because it is very
efficient computationally. The CdBG can be constructed in \(O(n)\) time and space
and it can utilize whole genome sequences, which is a shortcoming of many of the
traditional phylogenetic tree reconstruction algorithms. 

Furthermore, we also figured that the CdBG contains more information than many
of the kmer counting methods, and if they can perform so well then the CdBG will
only be able to perform better because it not only stored the kmers (as nodes in
the graph), but it also stores the context in which those kmers occur (as edges
where \(k - 1\) basepairs overlap on either end of the kmer).
*** Our Contribution
**** =kleuren=
In order to prove our hypothesis, we did what every self-respecting Computer
Scientist would do, we wrote a program to figure out if it worked. We call our
program [[https://github.com/Colelyman/kleuren][=kleuren=]], which is Dutch for "colors" (referring to the colors in the
CdBG). 

=kleuren= works by finding /bubble/ regions of the CdBG. A bubble is defined as
a subgraph of the CdBG that consists of a start and end node that are present in
$n$ or more colors, and there are multiple paths connecting the start node to
the end node; where $n$ is a given parameter and is no greater than the total
number of colors in the CdBG and a path is simply a traversal from one node to
another.

After the bubbles are found, they are aligned through Multiple Sequence
Alignment (MSA) via [[https://mafft.cbrc.jp/alignment/software/][MAFFT]] and then each MSA block is concatenated to form a
supermatrix. The supermatrix is then fed into a Maximum-Likelihood program
([[http://www.iqtree.org/][IQ-TREE]]) to reconstruct the phylogenetic tree of the taxa.
**** How Bubbles are Found 
=kleuren= uses fairly simple and straightforward algorithms to find
the bubbles, which is broken up into two steps: Finding the End Node
and Extending the Paths.
***** Finding the End Node
=kleuren= iterates over the super-set (the union of all kmers from all
taxa) as potential start nodes (in a dBG the nodes are kmers, thus
$node == kmer$). Given a kmer, it is queried in the CdBG and the number
of taxa (or colors, thus $taxon == color$) is calculated to determine if
the number of colors for that kmer, $c$, is greater than or equal to $n$,
where $n$ is a parameter provided by the user.

If $c \geq n$ then the node is a valid start node and a breadth-first
search is performed starting from this node until another node is
found where the number of colors that it contains is greater than or
equal to $n$, which then becomes the end node.
***** Extending the Paths
After an end node is discovered, the sequence of each path between the
start and end nodes must be calculated. In order to discover a path in
a dBG, one must /collapse/ edges by appending the last nucleotide of
the next node to the previous node's sequence. For example, if a node
is =ACT -> CTG=, then the collapsed sequence will turn out to be
=ACTG=.

This is implemented as at most $c$ depth-first searches, where $c$ is
the number of colors. The number of depth-first searches decreases as
the number of paths with shared colors increases.
*** Further Reading 
If you are interested in the details of our algorithm and would like to see some
results, please check out our paper [[https://ieeexplore.ieee.org/document/8251300/][Whole Genome Phylogenetic Tree
Reconstruction Using Colored de Bruijn Graphs]] ([[https://arxiv.org/abs/1709.00164][preprint]]). We are currently
working on extending =kleuren= to improve its efficiency.
** DONE Intelligence to Arrogance Ratio
CLOSED: [2018-08-18 Sat 11:57]
Yesterday I graduated with my Bachelor's degree from [[https://byu.edu][Brigham Young University]]
and attended the Convocation services for my college (College of Physical and
Mathematical Sciences). Our dean, [[https://madison.byu.edu/][Dr. Shane Reese]], gave a very inspirational
talk, of which I would like to share part of it with you.

Dr. Reese's talk centered on two pieces of advice to the graduates, working hard
and being meek. He also provided tools of measurement in order for us to see how
well we are following his advice.

His first piece of advice was to work really hard. He shared that there is no
substitute to working hard, and that one can measure each day if one has given
an honest day's work.

The second piece of advice is what I would like to primarily focus on, and that
advice was to be meek. As a tool to measure one's meekness, he shared a
conversation that he had overheard where a faculty member was discussing the
president of our university, [[https://president.byu.edu/bio][Dr. Kevin J. Worthen]]. This faculty member described
Dr. Worthen has having an incredibly high intelligence to arrogance ratio,
illustrated below.

#+BEGIN_EXPORT latex
$\frac{intelligence}{arrogance}$
#+END_EXPORT

Imagine that one's intelligence and arrogance can be quantified, then the
intelligence to arrogance ratio would be your quantified intelligence divided by
your quantified arrogance. For example, if one is incredibly dumb but also quite
full of themselves, then the ratio would be extremely low. On the other hand, if
one is reasonably intelligent while still humble, then the ratio is quite high.
As a third example, if one is intelligent, but also pompous, then the ratio will
be around 1.

In my experience, the individuals with a low ratio are the most pleasant to be
around, because they offer interesting insights and advice while not being
condescending. They are the ones that show you (rather than tell you) how
intelligent they are.

I found this advice to be incredibly insightful and useful to all. I hope to
increase my own intelligence to arrogance ratio as I pursue higher education and
gain more life experience.
** TODO Hugo + Micropub = Bliss
:PROPERTIES:
  :EXPORT_FILE_NAME: hugo-micropub-bliss
:END:
This post is about how I managed to set up a micropub endpoint to publish to my
Hugo static site hosted on Netlify. Now that I have completed it, I can say that
it was quite the journey.

Here are some of the invaluable resources that I used along the way:
  - https://rhiaro.co.uk/2015/04/minimum-viable-micropub
  - https://quill.p3k.io/creating-a-micropub-endpoint
  - https://tokens.indieauth.com/token
  - https://www.netlify.com/docs/functions/
  - https://www.w3.org/TR/micropub/
  - https://github.com/google/go-github
  - https://github.com/google/go-github/blob/master/example/commitpr/main.go
** TODO Multi-Editing Like a Boss (with Emacs)
:PROPERTIES:
  :EXPORT_FILE_NAME: multi-editing-like-a-boss--with-emacs
:END:
Reference the following post https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/
* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# End:
